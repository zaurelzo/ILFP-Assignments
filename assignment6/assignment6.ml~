(*========================== DATA STRUCTURE  =======================================*)


type abstraction =  Abstract of (string list ) * term and 

 term = Var of string 
| Integer of int 
| Bool of bool 
| Unit of unit 
|Plus of term * term 
| Mul of term * term 
|And of term * term 
|Or of term * term
|Not of term
|Equal of term * term 
|IfThenElse of term * term * term  
|Abs of abstraction
|App of abstraction * (term list ) ;;


type opCode = Ret
|Call 
|Op_plus 
| Op_mul
|Op_and 
|Op_or
|Op_not
|Op_equal 
|Op_If_then_else 
| Lookup of string  
|CLOS of ( string list ) * (opCode list ) 
|Const of term ;;

type table = Table of string * term ;;

type closure  = (string list) * (opCode list list ) *  table ;;

type contentStack =  T of term | C of closure ;;

type stack = (contentStack list);;


type dump = stack * table * (opCode list list ) ;;
(*===================================== END DATASTRUCTURE ======================================================*)



let rec compileCode listeOfTerm = match listeOfTerm with
 [] -> []
 |hd::tl -> (match hd  with
 	| Var(a) -> Lookup(a):: (compileCode tl )
 	| Integer(i) -> Const( Integer(i) ):: (compileCode tl )
 	|Bool(b) ->  Const(Bool(b)):: ( compileCode tl )
 	|Unit(b) ->  Const(Unit(b)):: ( compileCode tl ) 
 	|Plus(t1,t2) ->  (compileCode [t1]) @ (compileCode [t2]) @ [ Op_plus ] @(compileCode tl )
 	|Mul(t1,t2) ->  (compileCode [t1]) @ (compileCode [t2]) @ [ Op_mul ] @(compileCode tl )
 	|And(t1,t2) ->  (compileCode [t1]) @ (compileCode [t2]) @ [ Op_and ] @(compileCode tl )
	|Or(t1,t2) ->  (compileCode [t1]) @ (compileCode [t2]) @ [ Op_or ] @(compileCode tl )
	|Not(t1) ->  (compileCode [t1]) @  [ Op_not ] @(compileCode tl )
	|Equal(t1,t2) ->  (compileCode [t1]) @ (compileCode [t2]) @ [ Op_equal ] @(compileCode tl )
	| Abs( Abstract ( listeVar,termListe ) )  ->  [CLOS( listeVar, (compileCode [termListe] ) )] @ [Ret] @ (compileCode tl ) 
	|   App ( u , t1 )  -> (compileCode [Abs(u)] ) @ (compileCode t1) @ [Call] @ (compileCode tl) 
	|IfThenElse(condition,expr1 ,expr2) -> ( compileCode [expr1] ) @ (compileCode [expr2] ) @ ( compileCode [condition] )@ [Op_If_then_else] @ (compileCode tl) ) ;;







